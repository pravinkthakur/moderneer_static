name: 🧪 Comprehensive Testing Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - critical
          - assessment
          - performance
          - visual

env:
  NODE_VERSION: '18'

jobs:
  # Lint and validation job
  lint-and-validate:
    name: 🔍 Lint & Validate
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Lint JavaScript
        run: npm run lint
        continue-on-error: true

      - name: ✅ Validate HTML
        run: npm run validate-html
        continue-on-error: true

  # Smoke tests - fast, critical functionality
  smoke-tests:
    name: 💨 Smoke Tests
    runs-on: ubuntu-latest
    needs: lint-and-validate
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🚀 Start web server
        run: npx http-server -p 8080 -c-1 &
        
      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:8080 --timeout 30000

      - name: 🏃‍♂️ Run smoke tests
        run: npm run test:smoke

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results
          path: |
            test-results/
            playwright-report/

  # Cross-browser testing matrix
  cross-browser-tests:
    name: 🌐 Cross-Browser Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: smoke-tests
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        include:
          - browser: chromium
            project: chromium
          - browser: firefox  
            project: firefox
          - browser: webkit
            project: webkit
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 🚀 Start web server
        run: npx http-server -p 8080 -c-1 &
        
      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:8080 --timeout 30000

      - name: 🧪 Run critical tests
        run: npx playwright test --project=${{ matrix.project }} --grep="@critical"

      - name: 📊 Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.browser }}-test-results
          path: |
            test-results/
            playwright-report/

  # Mobile testing
  mobile-tests:
    name: 📱 Mobile Tests
    runs-on: ubuntu-latest
    needs: smoke-tests
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: � Start web server
        run: npx http-server -p 8080 -c-1 &
        
      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:8080 --timeout 30000

      - name: �📱 Run mobile tests
        run: npx playwright test --project="Mobile Chrome" --project="Mobile Safari"

      - name: 📊 Upload mobile test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mobile-test-results
          path: |
            test-results/
            playwright-report/

  # Assessment comprehensive testing
  assessment-tests:
    name: 🎯 Assessment Tests
    runs-on: ubuntu-latest
    needs: cross-browser-tests
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🚀 Start web server
        run: npx http-server -p 8080 -c-1 &
        
      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:8080 --timeout 30000

      - name: 🎯 Run assessment tests
        run: npm run test:assessment

      - name: 📊 Upload assessment test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: assessment-test-results
          path: |
            test-results/
            playwright-report/

  # Performance testing
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: cross-browser-tests
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: 🚀 Start web server
        run: npx http-server -p 8080 -c-1 &
        
      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:8080 --timeout 30000

      - name: ⚡ Run performance tests
        run: npm run test:performance

      - name: 📈 Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: |
            test-results/
            playwright-report/

  # Visual regression testing
  visual-tests:
    name: 📸 Visual Tests
    runs-on: ubuntu-latest
    needs: cross-browser-tests
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: � Start web server
        run: npx http-server -p 8080 -c-1 &
        
      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:8080 --timeout 30000

      - name: �📸 Run visual regression tests
        run: npm run test:visual

      - name: 🖼️ Upload visual test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-results
          path: |
            test-results/
            playwright-report/
            test-results/screenshots/

  # Accessibility testing
  accessibility-tests:
    name: ♿ Accessibility Tests  
    runs-on: ubuntu-latest
    needs: cross-browser-tests
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🚀 Start web server
        run: npx http-server -p 8080 -c-1 &
        
      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:8080 --timeout 30000

      - name: ♿ Run accessibility tests
        run: npx playwright test --grep="@accessibility"

      - name: 📊 Upload accessibility results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-test-results
          path: |
            test-results/
            playwright-report/

  # Error handling and edge cases
  error-handling-tests:
    name: 🚨 Error Handling Tests
    runs-on: ubuntu-latest
    needs: cross-browser-tests
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: � Start web server
        run: npx http-server -p 8080 -c-1 &
        
      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:8080 --timeout 30000

      - name: �🚨 Run error handling tests
        run: npx playwright test tests/error-handling/

      - name: 📊 Upload error handling results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: error-handling-test-results
          path: |
            test-results/
            playwright-report/

  # Full regression test suite
  full-regression:
    name: 🔄 Full Regression Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_suite == 'all')
    needs: [smoke-tests, cross-browser-tests]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: � Start web server
        run: npx http-server -p 8080 -c-1 &
        
      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:8080 --timeout 30000

      - name: �🔄 Run full test suite
        run: npm test

      - name: 📊 Upload full regression results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: full-regression-results
          path: |
            test-results/
            playwright-report/

  # Test results consolidation and reporting
  test-report:
    name: 📋 Test Report
    runs-on: ubuntu-latest
    if: always()
    needs: [
      smoke-tests,
      cross-browser-tests, 
      mobile-tests,
      assessment-tests,
      performance-tests,
      visual-tests,
      accessibility-tests,
      error-handling-tests
    ]
    steps:
      - name: 📥 Download all test artifacts
        uses: actions/download-artifact@v4

      - name: 📊 Generate consolidated report
        run: |
          echo "# 🧪 Test Results Summary" > test-summary.md
          echo "" >> test-summary.md
          echo "## Test Execution Results" >> test-summary.md
          echo "" >> test-summary.md
          
          # Check for test result files and summarize
          find . -name "*.json" -path "*/test-results/*" | while read file; do
            echo "- Found results: $file" >> test-summary.md
          done
          
          echo "" >> test-summary.md
          echo "## Coverage Areas Tested" >> test-summary.md
          echo "- ✅ Smoke Tests (Critical functionality)" >> test-summary.md
          echo "- ✅ Cross-browser compatibility (Chrome, Firefox, Safari)" >> test-summary.md
          echo "- ✅ Mobile responsiveness" >> test-summary.md
          echo "- ✅ Assessment tool functionality" >> test-summary.md
          echo "- ✅ Performance metrics" >> test-summary.md
          echo "- ✅ Visual regression" >> test-summary.md
          echo "- ✅ Accessibility compliance" >> test-summary.md
          echo "- ✅ Error handling and edge cases" >> test-summary.md
          
          cat test-summary.md

      - name: 📋 Upload consolidated report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-report
          path: test-summary.md

      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            try {
              const summary = fs.readFileSync('test-summary.md', 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🧪 Automated Test Results\n\n${summary}\n\n*Tests completed at ${new Date().toISOString()}*`
              });
            } catch (error) {
              console.log('Could not post comment:', error);
            }

  # Deploy test reports to GitHub Pages (if enabled)
  deploy-reports:
    name: 🚀 Deploy Test Reports
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    needs: test-report
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: 📥 Download test artifacts
        uses: actions/download-artifact@v4

      - name: 📋 Setup Pages
        uses: actions/configure-pages@v3

      - name: 🗂️ Organize reports
        run: |
          mkdir -p reports
          find . -name "playwright-report" -type d | while read dir; do
            cp -r "$dir" "reports/$(basename $(dirname $dir))-report" || true
          done
          
          # Create index page
          cat > reports/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Moderneer Test Reports</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 2rem; }
              .report-link { 
                display: block; 
                padding: 1rem; 
                margin: 0.5rem 0; 
                background: #f5f5f5; 
                text-decoration: none; 
                border-radius: 4px; 
              }
              .report-link:hover { background: #e5e5e5; }
            </style>
          </head>
          <body>
            <h1>🧪 Moderneer Test Reports</h1>
            <p>Automated test reports for the Moderneer static website.</p>
            <div id="reports"></div>
            <script>
              const reportsDiv = document.getElementById('reports');
              
              // List available report directories
              fetch('.')
                .then(() => {
                  // Fallback: create static links
                  const reports = [
                    'smoke-test-results-report',
                    'chromium-test-results-report', 
                    'firefox-test-results-report',
                    'webkit-test-results-report',
                    'assessment-test-results-report',
                    'performance-test-results-report',
                    'visual-test-results-report'
                  ];
                  
                  reports.forEach(report => {
                    const link = document.createElement('a');
                    link.href = report + '/index.html';
                    link.className = 'report-link';
                    link.textContent = report.replace('-', ' ').toUpperCase();
                    reportsDiv.appendChild(link);
                  });
                });
            </script>
          </body>
          </html>
          EOF

      - name: 📤 Upload Pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: reports

      - name: 🚀 Deploy to Pages
        id: deployment
        uses: actions/deploy-pages@v2
